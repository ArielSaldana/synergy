"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HomeComponent = function (_React$Component) {
    _inherits(HomeComponent, _React$Component);

    function HomeComponent() {
        _classCallCheck(this, HomeComponent);

        return _possibleConstructorReturn(this, (HomeComponent.__proto__ || Object.getPrototypeOf(HomeComponent)).apply(this, arguments));
    }

    _createClass(HomeComponent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "h1",
                    null,
                    "home"
                ),
                React.createElement("div", { "data-syn-router-container": true })
            );
        }
    }]);

    return HomeComponent;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//preload views?

var aboutComponentInstance = null;

var AboutComponent = function () {
    function AboutComponent(route) {
        _classCallCheck(this, AboutComponent);

        if (!aboutComponentInstance) aboutComponentInstance = this;

        this.route = route;
        this.view = null;
        this.init_view();
        this.render();

        return aboutComponentInstance;
    }

    _createClass(AboutComponent, [{
        key: "init_view",
        value: function init_view() {
            this.view = React.createClass({
                render: function render() {
                    return React.createElement("p", null, React.createElement("span", { style: { fontSize: '40px' } }, "About"));
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            ReactDOM.render(React.createElement(this.view, null), this.route.container);
        }
    }]);

    return AboutComponent;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//preload views?

var testComponentInstance = null;

var TestComponent = function () {
    function TestComponent(route) {
        _classCallCheck(this, TestComponent);

        if (!testComponentInstance) testComponentInstance = this;

        this.route = route;
        this.view = null;
        this.init_view();
        this.render();

        return testComponentInstance;
    }

    _createClass(TestComponent, [{
        key: "init_view",
        value: function init_view() {
            this.view = React.createClass({
                render: function render() {
                    return React.createElement("p", null, React.createElement("span", { style: { fontSize: '40px' } }, "Test"));
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            ReactDOM.render(React.createElement(this.view, null), this.route.container);
        }
    }]);

    return TestComponent;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HelloComponent = function (_React$Component) {
    _inherits(HelloComponent, _React$Component);

    function HelloComponent() {
        _classCallCheck(this, HelloComponent);

        return _possibleConstructorReturn(this, (HelloComponent.__proto__ || Object.getPrototypeOf(HelloComponent)).apply(this, arguments));
    }

    _createClass(HelloComponent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    null,
                    "Hello ",
                    this.props.name
                ),
                React.createElement("div", { "data-syn-router-container": true })
            );
        }
    }]);

    return HelloComponent;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseComponent = function (_React$Component) {
    _inherits(BaseComponent, _React$Component);

    function BaseComponent() {
        _classCallCheck(this, BaseComponent);

        var _this = _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).call(this));

        _this.state = {
            liked: false,
            link: null
        };

        _this.hist = new History();

        _this.handleClick = _this.handleClick.bind(_this);
        _this.onSelectLink = _this.onSelectLink.bind(_this);

        return _this;
    }

    _createClass(BaseComponent, [{
        key: "handleClick",
        value: function handleClick(e) {
            // e = e || window.event;
            // e.target || e.srcElement; 
            // console.log(e.target);
            console.log(e.currentTarget);
        }
    }, {
        key: "onSelectLink",
        value: function onSelectLink(link) {
            this.setState({ link: link });
        }
    }, {
        key: "findActive",
        value: function findActive() {
            var path = this.hist.getPath();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.props.links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var link = _step.value;

                    if (link.url === path) {
                        this.onSelectLink(link);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "componentWillMount",
        value: function componentWillMount() {
            this.findActive();
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            return React.createElement(
                "div",
                null,
                React.createElement(
                    "header",
                    null,
                    React.createElement(
                        "div",
                        { className: "container" },
                        React.createElement(
                            "div",
                            { className: "logo" },
                            React.createElement(
                                "p",
                                null,
                                React.createElement(
                                    "span",
                                    null,
                                    "Synergy "
                                ),
                                "Project"
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "navigation" },
                        React.createElement(
                            "ul",
                            null,
                            this.props.links.map(function (val, i) {
                                return React.createElement(
                                    "li",
                                    { className: _this2.state.link === val ? 'active' : '', onClick: _this2.onSelectLink.bind(null, val), key: i },
                                    React.createElement(
                                        "a",
                                        { "data-syn-router-link": true, href: '' + val.url },
                                        val.name
                                    )
                                );
                            })
                        )
                    )
                ),
                React.createElement("div", { "data-syn-router-container": true })
            );
        }
    }]);

    return BaseComponent;
}(React.Component);

BaseComponent.propTypes = {
    name: React.PropTypes.string,
    links: React.PropTypes.array,
    active: React.PropTypes.string
};

BaseComponent.defaultProps = {
    name: 'Ariel',
    links: [{ name: 'Overview', url: '/home', id: 1 }, { name: 'Release Notes', url: '/release-notes', id: 2 }],
    active: null

};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Overview = function (_React$Component) {
    _inherits(Overview, _React$Component);

    function Overview() {
        _classCallCheck(this, Overview);

        var _this = _possibleConstructorReturn(this, (Overview.__proto__ || Object.getPrototypeOf(Overview)).call(this));

        _this.state = {
            liked: false,
            clicked: false
        };

        // var request = new XMLHttpRequest();
        // request.open('GET', 'https://httpbin.org/get', true);

        // request.onload = function () {
        //     if (request.status >= 200 && request.status < 400) {
        //         // Success!
        //         var data = JSON.parse(request.responseText);
        //         console.log(data);
        //     } else {
        //         console.log('error');
        //         // We reached our target server, but it returned an error

        //     }
        // };

        // request.onerror = function () {
        //     console.log('error1');
        //     // There was a connection error of some sort
        // };

        // request.send();
        // console.log('no');

        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    _createClass(Overview, [{
        key: 'handleClick',
        value: function handleClick() {
            console.log('moo');
        }
    }, {
        key: 'render',
        value: function render() {
            return React.createElement(
                'div',
                null,
                React.createElement(
                    'h1',
                    { onClick: this.handleClick },
                    'Overview'
                )
            );
        }
    }]);

    return Overview;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReleaseNotes = function (_React$Component) {
    _inherits(ReleaseNotes, _React$Component);

    function ReleaseNotes() {
        _classCallCheck(this, ReleaseNotes);

        var _this = _possibleConstructorReturn(this, (ReleaseNotes.__proto__ || Object.getPrototypeOf(ReleaseNotes)).call(this));

        _this.ajax = new Ajax();

        _this.state = {
            notes: []
        };
        return _this;
    }

    _createClass(ReleaseNotes, [{
        key: "componentWillMount",
        value: function componentWillMount() {

            // this.ajax.getJSON('/release-notes.json', function (test) {
            //     console.log(test);
            // });

            // this.ajax.get('/release-notes.json').then(
            //     (value) => {
            //         this.setNotes(value);
            //     },
            //     function (reason) {
            //         console.error(reason);
            //     }
            // )
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            this.ajax.get('/release-notes.json').then(function (value) {
                _this2.setNotes(value.releaseNotes);
            }, function (reason) {
                console.error(reason);
            });
        }
    }, {
        key: "setNotes",
        value: function setNotes(notes) {
            this.setState({ notes: notes });
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "section",
                { className: "release-notes" },
                React.createElement(
                    "div",
                    { className: "container heading" },
                    React.createElement(
                        "h1",
                        null,
                        "Release Notes for Synergy"
                    ),
                    React.createElement(
                        "p",
                        null,
                        "View the release notes here:"
                    )
                ),
                React.createElement(
                    "div",
                    { id: "release-notes", className: "container" },
                    this.state.notes.map(function (val, i) {
                        return React.createElement(
                            "div",
                            { key: i },
                            React.createElement(
                                "div",
                                null,
                                React.createElement(
                                    "p",
                                    { className: "meta" },
                                    React.createElement(
                                        "span",
                                        { className: "release-date" },
                                        val.date
                                    ),
                                    React.createElement(
                                        "span",
                                        { className: "release-version" },
                                        val.version
                                    )
                                ),
                                React.createElement(
                                    "h2",
                                    null,
                                    val.title
                                )
                            ),
                            React.createElement(
                                "ul",
                                { className: "changes" },
                                val.updates.map(function (update, i2) {
                                    return React.createElement(
                                        "li",
                                        { key: i2 },
                                        React.createElement(
                                            "div",
                                            { className: "change-label-container" },
                                            React.createElement(
                                                "em",
                                                { className: update.type },
                                                update.type
                                            )
                                        ),
                                        update.data
                                    );
                                })
                            )
                        );
                    })
                )
            );
        }
    }]);

    return ReleaseNotes;
}(React.Component);