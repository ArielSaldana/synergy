"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HomeComponent = function (_React$Component) {
    _inherits(HomeComponent, _React$Component);

    function HomeComponent() {
        _classCallCheck(this, HomeComponent);

        return _possibleConstructorReturn(this, (HomeComponent.__proto__ || Object.getPrototypeOf(HomeComponent)).apply(this, arguments));
    }

    _createClass(HomeComponent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "h1",
                    null,
                    "home"
                ),
                React.createElement("div", { "data-syn-router-container": true })
            );
        }
    }]);

    return HomeComponent;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//preload views?

var aboutComponentInstance = null;

var AboutComponent = function () {
    function AboutComponent(route) {
        _classCallCheck(this, AboutComponent);

        if (!aboutComponentInstance) aboutComponentInstance = this;

        this.route = route;
        this.view = null;
        this.init_view();
        this.render();

        return aboutComponentInstance;
    }

    _createClass(AboutComponent, [{
        key: "init_view",
        value: function init_view() {
            this.view = React.createClass({
                render: function render() {
                    return React.createElement("p", null, React.createElement("span", { style: { fontSize: '40px' } }, "About"));
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            ReactDOM.render(React.createElement(this.view, null), this.route.container);
        }
    }]);

    return AboutComponent;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//preload views?

var testComponentInstance = null;

var TestComponent = function () {
    function TestComponent(route) {
        _classCallCheck(this, TestComponent);

        if (!testComponentInstance) testComponentInstance = this;

        this.route = route;
        this.view = null;
        this.init_view();
        this.render();

        return testComponentInstance;
    }

    _createClass(TestComponent, [{
        key: "init_view",
        value: function init_view() {
            this.view = React.createClass({
                render: function render() {
                    return React.createElement("p", null, React.createElement("span", { style: { fontSize: '40px' } }, "Test"));
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            ReactDOM.render(React.createElement(this.view, null), this.route.container);
        }
    }]);

    return TestComponent;
}();
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HelloComponent = function (_React$Component) {
    _inherits(HelloComponent, _React$Component);

    function HelloComponent() {
        _classCallCheck(this, HelloComponent);

        return _possibleConstructorReturn(this, (HelloComponent.__proto__ || Object.getPrototypeOf(HelloComponent)).apply(this, arguments));
    }

    _createClass(HelloComponent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    null,
                    "Hello ",
                    this.props.name
                ),
                React.createElement("div", { "data-syn-router-container": true })
            );
        }
    }]);

    return HelloComponent;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseComponent = function (_React$Component) {
    _inherits(BaseComponent, _React$Component);

    function BaseComponent() {
        _classCallCheck(this, BaseComponent);

        return _possibleConstructorReturn(this, (BaseComponent.__proto__ || Object.getPrototypeOf(BaseComponent)).apply(this, arguments));
    }

    _createClass(BaseComponent, [{
        key: "render",
        value: function render() {
            return (
                // <div>
                //     <div>
                //         <ul>
                //             <li><span data-syn-router-link href="/home">Home</span></li>
                //             <li><a data-syn-router-link href="/about">About</a></li>
                //             <li><a data-syn-router-link href="/contact">Contact</a></li>
                //             <li><a data-syn-router-link href="/home/test">test</a></li>
                //         </ul>

                //     </div>
                //     <div data-syn-router-container>
                //     </div>
                // </div>
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "header",
                        null,
                        React.createElement(
                            "div",
                            { className: "container" },
                            React.createElement(
                                "div",
                                { className: "logo" },
                                React.createElement(
                                    "p",
                                    null,
                                    React.createElement(
                                        "span",
                                        null,
                                        "Synergy "
                                    ),
                                    "Project"
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "navigation" },
                            React.createElement(
                                "ul",
                                null,
                                React.createElement(
                                    "li",
                                    null,
                                    React.createElement(
                                        "a",
                                        { "data-syn-router-link": true, href: "/home" },
                                        "Overview"
                                    )
                                ),
                                React.createElement(
                                    "li",
                                    null,
                                    React.createElement(
                                        "a",
                                        { "data-syn-router-link": true, href: "/release-notes" },
                                        "Release Notes"
                                    )
                                )
                            )
                        )
                    ),
                    React.createElement("div", { "data-syn-router-container": true })
                )
            );
        }
    }]);

    return BaseComponent;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Overview = function (_React$Component) {
    _inherits(Overview, _React$Component);

    function Overview() {
        _classCallCheck(this, Overview);

        return _possibleConstructorReturn(this, (Overview.__proto__ || Object.getPrototypeOf(Overview)).apply(this, arguments));
    }

    _createClass(Overview, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "h1",
                    null,
                    "Overview"
                )
            );
        }
    }]);

    return Overview;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReleaseNotes = function (_React$Component) {
    _inherits(ReleaseNotes, _React$Component);

    function ReleaseNotes() {
        _classCallCheck(this, ReleaseNotes);

        return _possibleConstructorReturn(this, (ReleaseNotes.__proto__ || Object.getPrototypeOf(ReleaseNotes)).apply(this, arguments));
    }

    _createClass(ReleaseNotes, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "section",
                { className: "release-notes" },
                React.createElement(
                    "div",
                    { className: "container heading" },
                    React.createElement(
                        "h1",
                        null,
                        "Release Notes for Synergy"
                    ),
                    React.createElement(
                        "p",
                        null,
                        "View the release notes here:"
                    )
                ),
                React.createElement(
                    "div",
                    { id: "release-notes", className: "container" },
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "div",
                            null,
                            React.createElement(
                                "p",
                                { className: "meta" },
                                React.createElement(
                                    "span",
                                    { className: "release-date" },
                                    "10/1/2016"
                                ),
                                React.createElement(
                                    "span",
                                    { className: "release-version" },
                                    "v0.0.2"
                                )
                            ),
                            React.createElement(
                                "h2",
                                null,
                                "Ride the Yak"
                            )
                        ),
                        React.createElement(
                            "ul",
                            { className: "changes" },
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added Router"
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added History"
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "updated" },
                                        "Updated"
                                    )
                                ),
                                "Updated router to support loading components based on url."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "todo" },
                                        "TODO"
                                    )
                                ),
                                "Base url (redirect and load Component)"
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "todo" },
                                        "TODO"
                                    )
                                ),
                                "OnClick events on component elements (such as making a link element active after clicking on it)."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "todo" },
                                        "TODO"
                                    )
                                ),
                                "Attach data to components using props (data such as ajax content)."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "todo" },
                                        "TODO"
                                    )
                                ),
                                "Add Error handling."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "todo" },
                                        "TODO"
                                    )
                                ),
                                "Server side rendering (So we can stop depending on the client side code to render the webpage). Also adds SEO benefits."
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "div",
                            null,
                            React.createElement(
                                "p",
                                { className: "meta" },
                                React.createElement(
                                    "span",
                                    { className: "release-date" },
                                    "10/1/2016"
                                ),
                                React.createElement(
                                    "span",
                                    { className: "release-version" },
                                    "v0.0.1"
                                )
                            ),
                            React.createElement(
                                "h2",
                                null,
                                "Pilot"
                            )
                        ),
                        React.createElement(
                            "ul",
                            { className: "changes" },
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added mouse events functionality."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added keyboard events functionality."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added browser dectection using the detector component."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added offline detection functionality."
                            ),
                            React.createElement(
                                "li",
                                null,
                                React.createElement(
                                    "div",
                                    { className: "change-label-container" },
                                    React.createElement(
                                        "em",
                                        { className: "added" },
                                        "Added"
                                    )
                                ),
                                "Added timer functionality. This has many uses, especially in applications that require high performance. Also supports request animation frame (Currently no polyfill for older browsers)."
                            )
                        )
                    )
                )
            );
        }
    }]);

    return ReleaseNotes;
}(React.Component);